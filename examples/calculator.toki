fun IsOp(op) =
	op:len() == 1 and op in "+-*/%^x" /= nil

fun PerformOp(a, b, op)
	if op == "x"
		op = "*"
	end

	inline('return a %v b'(op))
end

fun Usage()
	println("Usage:", argat(0), "-h | --help")
	println("      ", argat(0), "<NUM> <OP> <NUM>")
	println()
	println("Providing no arguments starts the REPL")
	println()
	println("Operations: + - * x / % ^")
	exit(0)
end

fun Repl()
	while true
		let op = readstr("(in)")

		if op == "exit"
			println("(exit)")
			break
		elif op == "help"
			println("Commands:   exit   help")
			println("Operations: + - * x / % ^")
		elif IsOp(op)
			let a = readnum("a ="), b = readnum("b =")
			println("(out)", a, op, b, "=", PerformOp(a, b, op))
		else
			println('(err) Unknown operation "%v", try "help"'(op))
		end
	end
end

if argc() > 1
	if argat(1) == "-h" or argat(1) == "--help"
		Usage()
	elif argc() == 4
		let a = strtonum(argat(1)), op = argat(2), b = strtonum(argat(3))
		println(a, op, b, "=", PerformOp(a, b, op))
	else
		println("(err) Unexpected arguments, try \"-h\"")
		exit(1)
	end
else
	Repl()
end
